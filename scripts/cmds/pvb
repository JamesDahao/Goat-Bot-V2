const axios = require("axios");
const moment = require("moment-timezone");

module.exports = {
  config: {
    name: "pvb",
    version: "1.3",
    author: "coc nico",
    description: "Automatically track Plants vs Brainrots seed stocks on startup with rarity icons"
  },

  onStart: async function ({ api }) {
    const threadList = await api.getThreadList(100, null, ["INBOX"]);
    const activeThreads = threadList.filter(t => t.isGroup);

    for (const thread of activeThreads) {
      api.sendMessage("Bot startup: PVB Stock tracking started", thread.threadID);
    }

    // Rarity mapping with icons and seed names
    const raritySeeds = {
      rare: [
        { name: "Cactus", icon: "🌵" },
        { name: "Strawberry", icon: "🍓" }
      ],
      epic: [
        { name: "Pumpkin", icon: "🎃" },
        { name: "Sunflower", icon: "🌻" }
      ],
      legendary: [
        { name: "Dragon Fruit", icon: "🐉" },
        { name: "Egg Plant", icon: "🍆" }
      ],
      mythic: [
        { name: "Watermelon", icon: "🍉" },
        { name: "Grape", icon: "🍇" }
      ],
      godly: [
        { name: "Cocotank", icon: "🥥" },
        { name: "Carnivorous", icon: "🥩" }
      ],
      secret: [
        { name: "Mr Carrot", icon: "🥕" },
        { name: "Tomatrio", icon: "🍅" },
        { name: "Shroombino", icon: "🍄" },
        { name: "Mango", icon: "🥭" }
      ]
    };

    const rarityOrder = ["rare", "epic", "legendary", "mythic", "godly", "secret"];

    async function startTracking() {
      let lastWindow = null;

      while (true) {
        try {
          const now = moment().tz("Asia/Manila");
          const minute = now.minute();
          const windowStart = Math.floor(minute / 5) * 5;
          const currentWindow = now.clone().minute(windowStart).second(0).millisecond(0);

          if (!lastWindow || !currentWindow.isSame(lastWindow)) {
            lastWindow = currentWindow.clone();

            const windowStartTime = currentWindow.valueOf();
            const windowEndTime = currentWindow.clone().add(5, "minutes").valueOf();
            const nextWindowTime = currentWindow.clone().add(5, "minutes").format("hh:mm:ss A");

            let sent = false;

            while (!sent && moment().tz("Asia/Manila").valueOf() < windowEndTime) {
              try {
                const res = await axios.get("https://plantsvsbrainrotsstocktracker.com/api/stock");
                const data = res.data;
                const updatedAt = data.updatedAt;

                if (updatedAt >= windowStartTime && updatedAt < windowEndTime) {
                  const seeds = data.items.filter(item => item.category === "seed");

                  // Check which rarities are present
                  const foundRarities = rarityOrder.filter(rarity =>
                    raritySeeds[rarity].some(seedInfo =>
                      seeds.some(seed => seed.name.toLowerCase().includes(seedInfo.name.toLowerCase()))
                    )
                  );

                  // Skip sending if only rare/epic are found
                  const hasHighRarity = foundRarities.some(r =>
                    ["legendary", "mythic", "godly", "secret"].includes(r)
                  );
                  if (!hasHighRarity) {
                    console.log("Skipped update: only rare/epic seeds found");
                    break; // abandon this window silently
                  }

                  // Build message normally
                  let msg = "🌱 PVB Seed Stock Update\n\n";

                  for (const rarity of rarityOrder) {
                    const matching = raritySeeds[rarity].filter(seedInfo =>
                      seeds.some(seed => seed.name.toLowerCase().includes(seedInfo.name.toLowerCase()))
                    );

                    if (matching.length > 0) {
                      msg += `🔹 ${rarity.charAt(0).toUpperCase() + rarity.slice(1)}\n`;
                      for (const seedInfo of matching) {
                        const stock =
                          seeds.find(s =>
                            s.name.toLowerCase().includes(seedInfo.name.toLowerCase())
                          )?.currentStock ?? "❓";
                        msg += `${seedInfo.icon} ${seedInfo.name}: ${stock} in stock\n`;
                      }
                      msg += "\n";
                    }
                  }

                  msg += `🕒 Updated: ${moment(updatedAt).tz("Asia/Manila").format("hh:mm:ss A")}\n`;
                  msg += `⏱️ Next: ${nextWindowTime}`;

                  for (const thread of activeThreads) {
                    api.sendMessage(msg, thread.threadID);
                  }

                  sent = true;
                }
              } catch (err) {
                console.error("API error:", err.message);
              }

              if (!sent) await new Promise(res => setTimeout(res, 5000));
            }
          }

          await new Promise(res => setTimeout(res, 5000));
        } catch (e) {
          console.error(e);
          await new Promise(res => setTimeout(res, 5000));
        }
      }
    }

    startTracking();
  }
};
